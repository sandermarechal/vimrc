global !p

import vim

def isPHPStrictTypes():
    return re.match('<\?php\s+declare\(strict_types=1\);', '\n'.join(vim.current.window.buffer[0:10]))

def getArgs(group):
    import re
    word = re.compile('([\w\\\\]+ )?(\$\w+)')
    comma = re.compile(', ?')
    args = []

    for arg in comma.split(group):
        m = word.match(arg)
        if m:
            args.append([m.group(1), m.group(2)])

    return args

def getClassName(desc):
	return desc if len(desc) > 0 and desc[0].isupper() else ''

def getTypeHint(desc):
	if desc == 'array':
		return desc
	return getClassName(desc)

def putTypeHint(snip, desc):
	hint = getTypeHint(desc)
	snip.rv = hint + ' ' if len(hint) > 0 else ''

def putDefault(snip, desc):
	hint = getTypeHint(desc)
	snip.rv = ' = []' if hint == 'array' else ' = null' if len(hint) > 0 and not isPHPStrictTypes() else ''

endglobal

snippet pub "Public property" !b
/**
 * @var ${2:string}
 */
public \$${1:property};${0}
endsnippet

snippet var "Class property" !b
/**
 * @var ${2:string}
 */
private \$${1:property};${0}
endsnippet

snippet fun "Function" !b
${1:public} function ${2:name}(${3})
{
    ${VISUAL}$0
}
endsnippet

snippet con "Constructor" !bs
/**
 * Constructor`!p
args = getArgs(t[2])
if len(args) > 0:
    snip += " *"
for i in args:
    type = i[0] if i[0] else "mixed "
    snip.rv += "\n" + snip.mkline(" * @param " + type + i[1])
`
 */
${1:public} function __construct($2)
{`!p
snip.shift()
args = getArgs(t[2])
for i in args:
    snip+= "$this->" + i[1][1:] + " = " + i[1] + ";"
`$0
}
endsnippet

snippet con "Constructor" "isPHPStrictTypes()" !bse
/**
 * Constructor
 */
${1:public} function __construct($2)
{`!p
snip.shift()
args = getArgs(t[2])
for i in args:
	snip+= "$this->" + i[1][1:] + " = " + i[1] + ";"
`$0
}
endsnippet

snippet isset "Isser and setter" !b
/**
 * Is ${1:property}
 *
 * @return bool
 */
public function is${1/\w+/\u$0/}()
{
    return \$this->$1;
}

/**
 * Set $1
 *
 * @param bool \$$1
 * @return self
 */
public function set${1/\w+/\u$0/}(\$$1 = true)
{
    \$this->$1 = \$$1;
    return \$this;
}${0}
endsnippet

snippet isset "Isser and setter" "isPHPStrictTypes()" !be
/**
 * Is ${1:property}
 */
public function is${1/\w+/\u$0/}(): bool
{
	return \$this->$1;
}

/**
 * Set $1
 */
public function set${1/\w+/\u$0/}(bool \$$1 = true): self
{
	\$this->$1 = \$$1;
	return \$this;
}${0}
endsnippet

snippet setis "Setter and isser" !b
/**
 * Set ${1:property}
 *
 * @param bool \$$1
 * @return self
 */
public function set${1/\w+/\u$0/}(\$$1 = true)
{
	\$this->$1 = \$$1;
	return \$this;
}

/**
 * Is $1
 *
 * @return bool
 */
public function is${1/\w+/\u$0/}()
{
	return \$this->$1;
}${0}
endsnippet

snippet setis "Setter and isser"  "isPHPStrictTypes()" !be
/**
 * Set ${1:property}
 */
public function set${1/\w+/\u$0/}(bool \$$1 = true): self
{
	\$this->$1 = \$$1;
	return \$this;
}

/**
 * Is $1
 */
public function is${1/\w+/\u$0/}(): bool
{
	return \$this->$1;
}${0}
endsnippet

snippet getset "Getter and setter" !b
/**
 * Get ${1:property}
 *
 * @return ${2:string}
 */
public function get${1/\w+/\u$0/}()
{
    return \$this->$1;
}

/**
 * Set $1
 *
 * @param $2 \$$1
 * @return self
 */
public function set${1/\w+/\u$0/}(`!p putTypeHint(snip, t[2])`\$$1${3:`!p putDefault(snip, t[2])`})
{
    \$this->$1 = \$$1;
    return \$this;
}${0}
endsnippet

snippet getset "Getter and setter" "isPHPStrictTypes()" !be
/**
 * Get ${1:property}
 */
public function get${1/\w+/\u$0/}(): ${2:string}
{
	return \$this->$1;
}

/**
 * Set $1
 */
public function set${1/\w+/\u$0/}($2 \$$1): self
{
	\$this->$1 = \$$1;
	return \$this;
}${0}
endsnippet

snippet setget "Setter and getter" "isPHPStrictTypes()" !be
/**
 * Set ${1:property}
 */
public function set${1/\w+/\u$0/}(${2:string} \$$1): self
{
	\$this->$1 = \$$1;
	return \$this;
}

/**
 * Get $1
 */
public function get${1/\w+/\u$0/}(): $2
{
	return \$this->$1;
}${0}
endsnippet

snippet is "Isser" !b
/**
 * Is ${1:property}
 *
 * @return bool
 */
public function is${1/\w+/\u$0/}()
{
    return \$this->$1;
}${0}
endsnippet

snippet is "Isser" "isPHPStrictTypes()" !be
/**
 * Is ${1:property}
 */
public function is${1/\w+/\u$0/}(): bool
{
	return \$this->$1;
}${0}
endsnippet

snippet get "Getter" !b
/**
 * Get ${1:property}
 *
 * @return ${2:string}
 */
public function get${1/\w+/\u$0/}()
{
    return \$this->$1;
}${0}
endsnippet

snippet get "Getter" "isPHPStrictTypes()" !be
/**
 * Get ${1:property}
 */
public function get${1/\w+/\u$0/}(): ${2:string}
{
	return \$this->$1;
}${0}
endsnippet

snippet set "Setter" !b
/**
 * Set ${1:property}
 *
 * @param ${2:string} \$$1
 * @return self
 */
public function set${1/\w+/\u$0/}(`!p putTypeHint(snip, t[2])`\$$1${3:`!p putDefault(snip, t[2])`})
{
    \$this->$1 = \$$1;
    return \$this;
}${0}
endsnippet

snippet set "Setter" "isPHPStrictTypes()" !be
/**
 * Set ${1:property}
 */
public function set${1/\w+/\u$0/}(${2:string} \$$1): self
{
	\$this->$1 = \$$1;
	return \$this;
}${0}
endsnippet

snippet getset1n "Get, add and remove for 1:n relation" !b
/**
 * Get ${1:property}
 *
 * @return ArrayCollection
 */
public function get${1/\w+/\u$0/}()
{
    return \$this->$1;
}

/**
 * Add ${2:${1/\w$//}}
 *
 * @param ${3:${2/\w+/\u$0/}} \$$2
 * @return self
 */
public function add${2/\w+/\u$0/}(`!p putTypeHint(snip, t[2])`${2/\w+/\u$0/} \$$2)
{
    if (!\$this->$1->contains(\$$2)) {
        \$this->$1[] = \$$2;
        \$$2->set${4:Reverse}(\$this);
    }

    return \$this;
}

/**
 * Remove $2
 *
 * @param ${2/\w+/\u$0/} \$$2
 * @return self
 */
public function remove${2/\w+/\u$0/}(${2/\w+/\u$0/} \$$2)
{
    if (\$this->$1->removeElement(\$$2)) {
        \$$2->set$4(null);
    }

    return \$this;
}${0}
endsnippet

snippet getset1n "Get, add and remove for 1:n relation" "isPHPStrictTypes()" !be
/**
 * Get ${1:property}
 */
public function get${1/\w+/\u$0/}(): Collection
{
	return \$this->$1;
}

/**
 * Add ${2:${1/\w$//}}
 */
public function add${2/\w+/\u$0/}(`!p putTypeHint(snip, t[2])`${2/\w+/\u$0/} \$$2): self
{
	if (!\$this->$1->contains(\$$2)) {
		\$this->$1[] = \$$2;
		\$$2->set${3:Reverse}(\$this);
	}

	return \$this;
}

/**
 * Remove $2
 */
public function remove${2/\w+/\u$0/}(${2/\w+/\u$0/} \$$2): self
{
	if (\$this->$1->removeElement(\$$2)) {
		\$$2->set$3(null);
	}

	return \$this;
}${0}
endsnippet

snippet getsetn1 "Get and set for n:1 relation" !b
/**
 * Get ${1:property}
 *
 * @return ${1/\w+/\u$0/}
 */
public function get${1/\w+/\u$0/}()
{
    return \$this->$1;
}

/**
 * Set $1
 *
 * @param ${1/\w+/\u$0/} \$$1
 * @return self
 */
public function set${1/\w+/\u$0/}(${1/\w+/\u$0/} \$$1 = null)
{
    if (\$this->$1 == \$$1) {
        return \$this;
    }

    \$old = \$this->$1;
    \$this->$1 = \$$1;

    if (\$old !== null) {
        \$old->remove${2:Reverse}(\$this);
    }

    if (\$$1 !== null) {
        \$$1->add$2(\$this);
    }

    return \$this;
}${0}
endsnippet

snippet getsetn1 "Get and set for n:1 relation" "isPHPStrictTypes()" !be
/**
 * Get ${1:property}
 */
public function get${1/\w+/\u$0/}(): ${1/\w+/\u$0/}
{
	return \$this->$1;
}

/**
 * Set $1
 */
public function set${1/\w+/\u$0/}(${1/\w+/\u$0/} \$$1 = null): self
{
	if (\$this->$1 == \$$1) {
		return \$this;
	}

	\$old = \$this->$1;
	\$this->$1 = \$$1;

	if (\$old !== null) {
		\$old->remove${2:Reverse}(\$this);
	}

	if (\$$1 !== null) {
		\$$1->add$2(\$this);
	}

	return \$this;
}${0}
endsnippet

snippet getsetnm "Get and set for n:m relations" !b
/**
 * Get ${1:property}
 *
 * @return ArrayCollection
 */
public function get${1/\w+/\u$0/}()
{
    return \$this->$1;
}

/**
 * Add ${2:${1/\w$//}}
 *
 * @param ${2/\w+/\u$0/} \$$2
 * @return self
 */
public function add${2/\w+/\u$0/}(${2/\w+/\u$0/} \$$2)
{
    if (!\$this->$1->contains(\$$2)) {
        \$this->$1[] = \$$2;
    }

    return \$this;
}

/**
 * Remove $2
 *
 * @param ${2/\w+/\u$0/} \$$2
 * @return self
 */
public function remove${2/\w+/\u$0/}(${2/\w+/\u$0/} \$$2)
{
    \$this->$1->removeElement(\$$2);
    return \$this;
}${0}
endsnippet

snippet getsetnm "Get and set for n:m relations" "isPHPStrictTypes()" !be
/**
 * Get ${1:property}
 */
public function get${1/\w+/\u$0/}(): Collection
{
	return \$this->$1;
}

/**
 * Add ${2:${1/\w$//}}
 */
public function add${2/\w+/\u$0/}(${2/\w+/\u$0/} \$$2): self
{
	if (!\$this->$1->contains(\$$2)) {
		\$this->$1[] = \$$2;
	}

	return \$this;
}

/**
 * Remove $2
 */
public function remove${2/\w+/\u$0/}(${2/\w+/\u$0/} \$$2): self
{
	\$this->$1->removeElement(\$$2);
	return \$this;
}${0}
endsnippet

snippet ent "Doctrine entity" !b
use Doctrine\ORM\Mapping as ORM;

/**
 * ${1:Object} entity
 *
 * @ORM\Entity
 * @ORM\Table(name="${1/([A-Z])(([a-z]+)([A-Z]))*([a-z]*)/\L$1(?3:$3_$4)$5\E/}")
 */
class $1
{
    ${0}
}
endsnippet

snippet col "Doctrine column" !b
/**
 * @ORM\Column(name="${3:${1/[A-Z]{1}/_\l$0/}}", type="${2:string}")
 */
private \$${1:property};${0}
endsnippet

snippet colid "Doctrine ID column" !b
/**
 * @ORM\Id
 * @ORM\GeneratedValue
 * @ORM\Column(name="id", type="integer")
 */
private \$id;${0}
endsnippet

snippet col11 "Doctrine OneToOne" !b
/**
 * @ORM\OneToOne(targetEntity="${2:`!v PhpNamespace('\')`${3:Entity}}"${4:, orphanRemoval=true})
 * @ORM\JoinColumn(name="${5:${1/[A-Z]{1}/_\l$0/g}_id}", referencedColumnName="${6:id}"${7:, unique=true}${8:, onDelete="${9:SET NULL}"})
 */
private \$${1:property};${0}
endsnippet

snippet col1n "Doctrine OneToMany" !b
/**
 * @ORM\OneToMany(targetEntity="${2:`!v PhpNamespace('\')`${3:Entity}}"${4:, mappedBy="${5:mapped}"})
 */
private \$${1:property};${0}
endsnippet

snippet coln1 "Doctrine ManyToOne" !b
/**
 * @ORM\ManyToOne(targetEntity="${2:`!v PhpNamespace('\')`${3:Entity}}"${4:, inversedBy="${5:inverse}"})
 * @ORM\JoinColumn(name="${6:${1/[A-Z]{1}/_\l$0/g}_id}", referencedColumnName="${7:id}"${8:, onDelete="${9:CASCADE}"}${10:, nullable=false})
 */
private \$${1:property};${0}
endsnippet

snippet colnm "Doctrine ManyToMany" !b
/**
 * @ORM\ManyToMany(targetEntity="${2:`!v PhpNamespace('\')`${3:Entity}}")
 * @ORM\JoinTable(name="${7:${4/_id//}_${6/_id//}}",
 *      joinColumns={@ORM\JoinColumn(name="${4:entity_id}", referencedColumnName="${5:id}")},
 *      inverseJoinColumns={@ORM\JoinColumn(name="${6:target_id}", referencedColumnName="${7:id}")}
 * )
 */
private \$${1:property};${0}
endsnippet

snippet prezent "Prezent file header"
/*
 * (c) Prezent Internet B.V. <info@prezent.nl>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
endsnippet

snippet inh "Inherit docblock"
/**
 * {@inheritDoc}
 */
endsnippet

snippet php "PHP file"
<?php

declare(strict_types=1);

namespace $0
endsnippet
