global !p

def getArgs(group):
    import re
    word = re.compile('(\w+ )?(\$\w+)')
    comma = re.compile(', ?')
    args = []

    for arg in comma.split(group):
        m = word.match(arg)
        if m:
            args.append([m.group(1), m.group(2)])

    return args

endglobal

snippet var "Class property" !b
/**
 * @var ${2:string}
 */
private \$${1:property};${0}
endsnippet

snippet fun "Function" !b
${1:public} function ${2:name}(${3})
{
    ${VISUAL}$0
}
endsnippet

snippet con "Constructor" !bs
/**
 * Constructor`!p
args = getArgs(t[2])
if len(args) > 0:
    snip += " *"
for i in args:
    type = i[0] if i[0] else "mixed "
    snip.rv += "\n" + snip.mkline(" * @param " + type + i[1])
`
 */
${1:public} function __construct($2)
{`!p
snip.shift()
args = getArgs(t[2])
for i in args:
    snip+= "$this->" + i[1][1:] + " = " + i[1] + ";"
`
}$0
endsnippet

snippet isset "Isser and setter" !b
/**
 * Isser for ${1:property}
 *
 * @return bool
 */
public function is${1/\w+/\u$0/}()
{
    return \$this->$1;
}

/**
 * Setter for $1
 *
 * @param bool \$$1
 * @return self
 */
public function set${1/\w+/\u$0/}(\$$1 = true)
{
    \$this->$1 = \$$1;
    return \$this;
}${0}
endsnippet

snippet getset "Getter and setter" !b
/**
 * Getter for ${1:property}
 *
 * @return ${2:string}
 */
public function get${1/\w+/\u$0/}()
{
    return \$this->$1;
}

/**
 * Setter for $1
 *
 * @param $2 \$$1
 * @return self
 */
public function set${1/\w+/\u$0/}(\$$1)
{
    \$this->$1 = \$$1;
    return \$this;
}${0}
endsnippet

snippet is "Isser" !b
/**
 * Isser for ${1:property}
 *
 * @return bool
 */
public function is${1/\w+/\u$0/}()
{
    return \$this->$1;
}${0}
endsnippet

snippet get "Getter" !b
/**
 * Getter for ${1:property}
 *
 * @return ${2:string}
 */
public function get${1/\w+/\u$0/}()
{
    return \$this->$1;
}${0}
endsnippet

snippet set "Setter" !b
/**
 * Setter for ${1:property}
 *
 * @param ${2:string} \$$1
 * @return self
 */
public function set${1/\w+/\u$0/}(\$$1)
{
    \$this->$1 = \$$1;
    return \$this;
}${0}
endsnippet

snippet getset1n "Get, add and remove for 1:n relation" !b
/**
 * Getter for ${1:property}
 *
 * @return ArrayCollection
 */
public function get${1/\w+/\u$0/}()
{
    return \$this->$1;
}

/**
 * Add ${2:${1/\w$//}}
 *
 * @param ${2/\w+/\u$0/} \$$2
 * @return self
 */
public function add${2/\w+/\u$0/}(${2/\w+/\u$0/} \$$2)
{
    if (!\$this->$1->contains(\$$2)) {
        \$this->$1[] = \$$2;
        \$$2->set${3:Reverse}(\$this);
    }

    return \$this;
}

/**
 * Remove $2
 *
 * @param ${2/\w+/\u$0/} \$$2
 * @return self
 */
public function remove${2/\w+/\u$0/}(${2/\w+/\u$0/} \$$2)
{
    if (\$this->$1->removeElement(\$$2)) {
        \$$2->set$3(null);
    }

    return \$this;
}${0}
endsnippet

snippet getsetn1 "Get and set for n:1 relation" !b
/**
 * Getter for ${1:property}
 *
 * @return ${1/\w+/\u$0/}
 */
public function get${1/\w+/\u$0/}()
{
    return \$this->$1;
}

/**
 * Setter for $1
 *
 * @param ${1/\w+/\u$0/} \$$1
 * @return self
 */
public function set${1/\w+/\u$0/}(${1/\w+/\u$0/} \$$1 = null)
{
    if (\$this->$1 == \$$1) {
        return \$this;
    }

    \$old = \$this->$1;
    \$this->$1 = \$$1;

    if (\$old !== null) {
        \$old->remove${2:Reverse}(\$this);
    }

    if (\$$1 !== null) {
        \$$1->add$2(\$this);
    }

    return \$this;
}${0}
endsnippet

snippet col "Doctrine column" !b
/**
 * @ORM\Column(name="${3:${1/[A-Z]{1}/_\l$0/}}", type="${2:string}")
 */
private \$${1:property};${0}
endsnippet

snippet colid "Doctrine ID column" !b
/**
 * @ORM\Id
 * @ORM\GeneratedValue(strategy="IDENTITY")
 * @ORM\Column(name="${3:${1/[A-Z]{1}/_\l$0/}}", type="${2:integer}")
 */
private \$${1:property};${0}
endsnippet

snippet col1n "Doctrine OneToMany" !b
/**
 * @ORM\OneToMany(targetEntity="${2:`!v PhpNamespace('\')`${3:Entity}}"${4:, mappedBy="${5:mapped}"})
 */
private \$${1:property};${0}
endsnippet

snippet coln1 "Doctrine ManyToOne" !b
/**
 * @ORM\ManyToOne(targetEntity="${2:`!v PhpNamespace('\')`${3:Entity}}"${4:, inversedBy="${5:inverse}"})
 * @ORM\JoinColumn(name="${6:${1/[A-Z]{1}/_\l$0/g}_id}", referencedColumnName="${7:id}"${8:, onDelete="${9:CASCADE}"})
 */
private \$${1:property};${0}
endsnippet
